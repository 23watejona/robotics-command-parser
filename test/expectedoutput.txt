public class CommandComposer{public static Command createArmScoreCommand(ArmPosition armPosition){double[] coordinates = ForwardKinematicsTool.getArmPosition(ArmSubsystem.get().getLowerArmAngle(),ArmSubsystem.get().getUpperArmAngle());boolean isArmForwards = coordinates[0] > 0;if (isArmForwards){if (armPosition != ArmPosition.MEDIUM_BACK && armPosition != ArmPosition.HIGH_BACK){return new ArmScoreCommand(armPosition);} else{return new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreCommand(armPosition));}} else{if (armPosition == ArmPosition.MEDIUM_BACK || armPosition == ArmPosition.HIGH_BACK){return new ArmScoreCommand(armPosition);} else{return new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),new ArmScoreCommand(armPosition));}}}public static Command getScoreThenLeaveCommand(){return new SequentialCommandGroup(getEnsurePreloadCommand(),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.HIGH_BACK),getOuttakePieceCommand(),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.POCKET),new DriveDistanceCommand(4));}public static Command getJustLeaveCommand(){return new SequentialCommandGroup(new DriveDistanceCommand(4));}public static Command getOverTheFulcrumNoScoreAuto(){return new SequentialCommandGroup(new DriveDistanceCommand(-0.2),new DriveTimeCommand(-0.6,500),new DriveTimeCommand(-0.25,2500),new DriveTimeCommand(0.55,750),new BalancePIDCommand());}public static Command getTwoScoreRedWireBumpAuto(){return new SequentialCommandGroup(new WheelGripperCommand(WheelGripperPosition.STOP),new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.HIGH_BACK).withTimeout(1.5)),getOuttakePieceCommand(),new ParallelRaceGroup(new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),getPickupPieceCommand()),new SequentialCommandGroup(new WaitCommand(0.25),new SequentialCommandGroup(new DriveTimeCommand(0.4,1650),new WaitCommand(0.2),new AutoAlignmentCommand(new Pose(1.86,-2.75,Math.toRadians(178)),0.1,1).withTimeout(5)))),new TurnRelativeCommand(-2),new ParallelCommandGroup(new WheelGripperCommand(WheelGripperPosition.INTAKE_CUBE_W_SENSOR),new SequentialCommandGroup(new DriveTimeCommand(-0.6,2250),new WaitCommand(0.1),new AutoAlignmentCommand(new Pose(6.3,-2.63,Math.PI),0.1,2).withTimeout(3)),new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.MEDIUM_BACK).withTimeout(1.5))),getOuttakePieceCommand(),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.POCKET));}public static Command getPickupPieceCommand(){return new ParallelCommandGroup(new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.LOW_AUTO),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.HOLD)),new WheelGripperCommand(WheelGripperPosition.INTAKE_CUBE_W_SENSOR));}public static Command getEnsurePreloadCommand(){return new SequentialCommandGroup(new WheelGripperCommand(WheelGripperPosition.INTAKE_CUBE_W_SENSOR).withTimeout(0.5),new WheelGripperCommand(WheelGripperPosition.STOP));}public static Command getOuttakePieceCommand(){return new SequentialCommandGroup(new WheelGripperCommand(WheelGripperPosition.OUTTAKE),new WaitCommand(0.5),new WheelGripperCommand(WheelGripperPosition.STOP));}public static Command getALittleCloser(){double limelightz = Math.abs(AprilTagSubsystem.get().m_z);double limelightYaw = Math.toRadians(-AprilTagSubsystem.get().m_yaw);double limelightx = AprilTagSubsystem.get().m_x;double targetz = limelightz / 2;double distanceToTarget = Math.sqrt(Math.pow(limelightx,2) + Math.pow(targetz,2));double angleToTarget = Math.atan2(targetz,limelightx);double turnAngle1 = Math.PI / 2 - (angleToTarget + limelightYaw);double turnAngle2 = -1 * (turnAngle1 + limelightYaw);SmartDashboard.putNumber("distanceToTarget",distanceToTarget);SmartDashboard.putNumber("angleToTarget",Math.toDegrees(angleToTarget));SmartDashboard.putNumber("turnAngle1",Math.toDegrees(turnAngle1));SmartDashboard.putNumber("turnAngle2",Math.toDegrees(turnAngle2));return new SequentialCommandGroup(new TurnCommand(Math.toDegrees(turnAngle1)),new DriveDistanceCommand(-distanceToTarget - 0.2).withTimeout(1.5),new TurnCommand(Math.toDegrees(turnAngle2)));}public static Command getAnvitaAuto(){return new DeferredCommandAuto(() -> getALittleCloser());}public static Command createArmScoreCommand(ArmPosition armPosition){double[] coordinates = ForwardKinematicsTool.getArmPosition(ArmSubsystem.get().getLowerArmAngle(),ArmSubsystem.get().getUpperArmAngle());boolean isArmForwards = coordinates[0] > 0;if (isArmForwards){if (armPosition != ArmPosition.MEDIUM_BACK && armPosition != ArmPosition.HIGH_BACK){return new ArmScoreCommand(armPosition);} else{return new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreCommand(armPosition));}} else{if (armPosition == ArmPosition.MEDIUM_BACK || armPosition == ArmPosition.HIGH_BACK){return new ArmScoreCommand(armPosition);} else{return new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),new ArmScoreCommand(armPosition));}}}public static Command getScoreThenLeaveCommand(){return new SequentialCommandGroup(getEnsurePreloadCommand(),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.HIGH_BACK),getOuttakePieceCommand(),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.POCKET),new DriveDistanceCommand(4));}public static Command getJustLeaveCommand(){return new SequentialCommandGroup(new DriveDistanceCommand(4));}public static Command getOverTheFulcrumNoScoreAuto(){return new SequentialCommandGroup(new DriveDistanceCommand(-0.2),new DriveTimeCommand(-0.6,500),new DriveTimeCommand(-0.25,2500),new DriveTimeCommand(0.55,750),new BalancePIDCommand());}public static Command getTwoScoreRedWireBumpAuto(){return new SequentialCommandGroup(new WheelGripperCommand(WheelGripperPosition.STOP),new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.HIGH_BACK).withTimeout(1.5)),getOuttakePieceCommand(),new ParallelRaceGroup(new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),getPickupPieceCommand()),new SequentialCommandGroup(new WaitCommand(0.25),new SequentialCommandGroup(new DriveTimeCommand(0.4,1650),new WaitCommand(0.2),new AutoAlignmentCommand(new Pose(1.86,-2.75,Math.toRadians(178)),0.1,1).withTimeout(5)))),new TurnRelativeCommand(-2),new ParallelCommandGroup(new WheelGripperCommand(WheelGripperPosition.INTAKE_CUBE_W_SENSOR),new SequentialCommandGroup(new DriveTimeCommand(-0.6,2250),new WaitCommand(0.1),new AutoAlignmentCommand(new Pose(6.3,-2.63,Math.PI),0.1,2).withTimeout(3)),new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_BACK_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.MEDIUM_BACK).withTimeout(1.5))),getOuttakePieceCommand(),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.TO_FORWARD_INTERMEDIATE),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.POCKET));}public static Command getPickupPieceCommand(){return new ParallelCommandGroup(new SequentialCommandGroup(new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.LOW_AUTO),new ArmScoreAutoCommand(ArmScoreAutoCommand.ArmPosition.HOLD)),new WheelGripperCommand(WheelGripperPosition.INTAKE_CUBE_W_SENSOR));}public static Command getEnsurePreloadCommand(){return new SequentialCommandGroup(new WheelGripperCommand(WheelGripperPosition.INTAKE_CUBE_W_SENSOR).withTimeout(0.5),new WheelGripperCommand(WheelGripperPosition.STOP));}public static Command getOuttakePieceCommand(){return new SequentialCommandGroup(new WheelGripperCommand(WheelGripperPosition.OUTTAKE),new WaitCommand(0.5),new WheelGripperCommand(WheelGripperPosition.STOP));}public static Command getALittleCloser(){double limelightz = Math.abs(AprilTagSubsystem.get().m_z);double limelightYaw = Math.toRadians(-AprilTagSubsystem.get().m_yaw);double limelightx = AprilTagSubsystem.get().m_x;double targetz = limelightz / 2;double distanceToTarget = Math.sqrt(Math.pow(limelightx,2) + Math.pow(targetz,2));double angleToTarget = Math.atan2(targetz,limelightx);double turnAngle1 = Math.PI / 2 - (angleToTarget + limelightYaw);double turnAngle2 = -1 * (turnAngle1 + limelightYaw);SmartDashboard.putNumber("distanceToTarget",distanceToTarget);SmartDashboard.putNumber("angleToTarget",Math.toDegrees(angleToTarget));SmartDashboard.putNumber("turnAngle1",Math.toDegrees(turnAngle1));SmartDashboard.putNumber("turnAngle2",Math.toDegrees(turnAngle2));return new SequentialCommandGroup(new TurnCommand(Math.toDegrees(turnAngle1)),new DriveDistanceCommand(-distanceToTarget - 0.2).withTimeout(1.5),new TurnCommand(Math.toDegrees(turnAngle2)));}public static Command getAnvitaAuto(){return new DeferredCommandAuto(() -> getALittleCloser());}}